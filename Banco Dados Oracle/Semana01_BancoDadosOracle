TREINAMENTO BEN FATTO -  BANCO DE DADOS
Projeto RH 

Autora: Márcia P. Martins

1. Objetivos do Projeto
1.1. Cadastro de Departamento;
1.2. Cadastro de Funcionário e Alocação;

2. Conceitos revisitados durante a execução projeto

2.1. Chave Primária
  A chave primária (primary key/PK) identificador único da tabela. PK são a chave para relacionamento entre tabelas. 
  Principais pontos: 
    - Não podem ser nulas;
    - Cada registro deve possuir uma chave única;
    - Para garantia da unicidade, e interessante que o valor seja gerado automaticamente pelo banco, mas não e obrigatória tal implementação. 

2.2. Chave Estrangeira 
  A chave estrangeira (foreign key/FK) é uma referência a uma chave primária de outra tabela, ela representa o relacionamento entre tabelas
  Principais pontos:
  - Podem ser nulas, dependendo da regra do negócio de cada banco;
  - Pode se ter mais de uma FK na mesma tabela. 
  
2.3. Constraints
   São restrições estabelecidas para uma coluna do banco de dados. Método para validar a integridade dos dados. 
   Tipos de constraints:
   - PK - índice único para um conjunto de colunas ou uma coluna;
   - Unique - coluna não poderá ter duas linhas com o mesmo valor;
   - FK - determina uma coluna ou um conjunto de colunas que possuem valores em outras tabelas, referente a uma referência ou um relacionamento;
   - Check - especifica a condição que a coluna precisa para salvar o registro;
   - Not Null - determina que a coluna tem preenchimento obrigatório. 


3. Manipulando tabelas

## Tabela de departamento 
  Considerações gerais sobre a estruturação da tabela Departamento:
  - Departamento pode ter um ou vários funcionários vinculados. 

    3.1. Criação da tabela 
      CREATE TABLE bf_dept(
          id_dept NUMBER(2) NOT NULL,
          nome_dept VARCHAR2(50),
          loc_dept VARCHAR2(30)
      );
      
    3.2.Alteração da tabela para a criação da chave primária
      ALTER TABLE bf_dept 
      ADD CONSTRAINT PK_DEPT
      PRIMARY KEY(id_dept);

## Tabela de Funcionário
  Considerações gerais sobre a estruturação da tabela Funcionário:
  - Funcionário pertence a um departamento. 

    3.3. Criação da Tabela
      CREATE TABLE bf_func(
          id_func NUMBER(2) NOT NULL,
          nome_func VARCHAR2(50),
          id_dept NUMBER(2)
      );

    3.4.Alteração da tabela para a criação da chave primária
    ALTER TABLE bf_func
    ADD CONSTRAINT pk_func
    PRIMARY KEY(id_func);
         
    3.5.Alteração da tabela para a criação da chave estrangeira
    ALTER TABLE bf_func
    ADD CONSTRAINT fk_id_dept
    FOREIGN KEY(id_dept)
    REFERENCES bf_dept(id_dept);
    
4. Comandos Data Manipulation Language(DML) 
    4.1. INSERT: utilizado para cadastrar dados na tabela, inserindo uma linha de dados quando executado com sucesso. 
          
          INSERT INTO bf_dept(id_dept, nome_dept,loc_dept) 
          VALUES (1,'RH','CPS');
         
    Problemas que podem ocorrer com a tentativa de inserção de dados: 
       4.1.1. CHAVE PRIMÁRIA REPETIDA - Tentativa de Inserção de dados 
          Não é possível tentar inserir dados na tabela informando o mesmo número de chave primária(PK), mesmo que os demais dados não se repitam. 
          INSERT INTO bf_dept(id_dept, nome_dept,loc_dept) 
          VALUES (1,'RH','RIO DE JANEIRO');

          Relatório de erros - ORA-00001: restrição exclusiva (SYSTEM.PK_DEPT) violada

       4.1.2. CADASTRO DE DEPARTAMENTO INEXISTENTE - Inserção de dados para um funcionário com  
          Não é possível inserir um novo funcionário com identificador de departamento inexistente, temos como retorno uma restrição de integridade.Nesse exemplo id_dept=7, 
         não existe na base de dados. 
          INSERT INTO bf_func(id_func, nome_func,id_dept,cpf,data_contratacao,data_desligamento,data_nascimento)
          VALUES (6, 'Nome do funcionario', 6, '55555555555',to_date('01/01/2020'),to_date('01/01/2021'),to_date('11/09/2000'))

          Relatório de erros - ORA-02291: restrição de integridade (SYSTEM.FK_ID_DEPT) violada - chave mãe não localizada
          (chave mão não localizada - PK na tabela de departamento inexistente)
   
     
    4.2. UPDATE: utilizado para atualizar um ou mais valores de uma coluna em uma linha ou um conjunto de linhas em uma tabela.
        Cláusula WHERE: serve para distinguir as linhas que serão atualizadas, criando uma condição para a atulização. 
            UPDATE bf_dept
            SET responsavel = 'MICHAEL'
            WHERE id_dept=1;
        
    4.3. DELETE: permite a exclusão de uma ou várias linhas de informações.
        Cláusula WHERE: serve para distinguir as linhas que serão deletadas, criando uma condição para a atulização. 
        
        DELETE bf_func WHERE id_func=5;
    
    4.4. SELECT: permite a busca os dados em uma ou mais tabelas, podendo ser utilizado a condição JOIN para agrupar as tabelas que queremos o retorno. 
        Clausula WHERE: serve para distinguir as linhas que serão retornadas. 
        
        SELECT * FROM bf_dept 
        WHERE id_dept=2;
       
     
  5. Comandos Data Definition Language(DDL)   
    5.1. ALTER: possibilita a alteração da tabela para a inclusão de novos campos.
        5.1.1. Criação do campo responsável, o campo será uma referência a um funcionário. (## Tabela de departamento )
          ALTER TABLE bf_dept ADD responsavel NUMBER(2);        

        5.1.2. Criação do campo data de contratação, data de desligamento do funcionário, data de nascimento, cpf. (## Tabela de Funcionário)
          ALTER TABLE bf_func ADD data_contratacao DATE; 
          ALTER TABLE bf_func ADD data_desligamento DATE;
          ALTER TABLE bf_func ADD data_nascimento DATE;
          ALTER TABLE bf_func ADD cpf NUMBER(11) NOT NULL;  
    
    5.2. Truncate: tem função muito parecida com o DELETE, porém sem a possibilidade de recuperar os dados uma vez deletados. Não possui cláusula WHERE, 
   porque deleta todos os registros.           
        
        TRUNCATE TABLE [NOME_TABELA]
        
    5.3. SavePoint: ponto de rollback, possibilitando a criação de uma marca especifica para retrono apenas de partes do processo.            
        
        
        
    5.4. Drop: responsável por excluir objetos do banco de dados, sem a possibilidade de RollBack.
            
        DROP TABLE bf_dept;   
   
  6. SQL Joins
     Buscas relacionamento diversas tabelas diferentes, onde e possível através das chaves relacioná-las, o retorno sempre dependente de todas as cláusulas
   e condições estabelecidas.  
     
     6.1. INNER JOIN: obter o resultado comum entre duas tabelas, o retorno é a união/resultado comum entre as mesmas. Através das cláusulas de restrições é possível 
   incluir regras para o retorno.   
         
          SELECT f.nome_func, f.cpf,f.data_contratacao, d.nome_dept, d.responsavel 
          FROM bf_dept d,
               bf_func f
          WHERE d.id_dept = f.id_dept
          AND d.id_dept=4;

     6.2. OUTER JOIN: resultado são todos os registros que estão nas tabelas consultadas.   
         Devemos utilizar o sinal (+) ao lado da tabela onde os dados podem não existir, para que ele retorne os elementos que podem não existir.  
                   
         SELECT f.nome_func, f.cpf,f.data_contratacao, d.nome_dept, d.responsavel 
         FROM bf_dept d,
              bf_func f
         WHERE d.id_dept = f.id_dept (+);    
         Para o exemplo acima devemos entender "Mesmo que não haja funcionário, me traga as informações do departamento".  
        
      6.3. LEFT JOIN
            
            SELECT f.nome_func, f.cpf,f.data_contratacao, d.nome_dept, d.responsavel 
            FROM bf_dept d
            LEFT JOIN bf_func f
            ON d.id_dept = f.id_dept;
      
      6.4. RIGHT JOIN 
      
          SELECT f.nome_func, f.cpf,f.data_contratacao, d.nome_dept, d.responsavel 
          FROM bf_dept d
          RIGHT JOIN bf_func f
          ON d.id_dept = f.id_dept;
    
    
    
    Referências:
     Material apresentado durante o treinamento BenFatto; 
     https://www.devmedia.com.br/
    
